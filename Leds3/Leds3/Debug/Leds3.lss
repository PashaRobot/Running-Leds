
Leds3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029f9  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000275a  00000000  00000000  00002ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a9  00000000  00000000  00005603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00005bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c8e  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012a  00000000  00000000  0000787e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000079a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	d7 e2       	ldi	r29, 0x27	; 39
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 24 01 	call	0x248	; 0x248 <main>
 20c:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <_Z8ShowLEDsm>:

#include <avr/io.h>
#include <util/delay.h>

void ShowLEDs(uint32_t Leds){
	PORTA_OUT = Leds 	& 0xFF;
 214:	60 93 04 06 	sts	0x0604, r22	; 0x800604 <__TEXT_REGION_LENGTH__+0x7fb604>
	PORTB_OUT = Leds >> 8   & 0x0F;
 218:	27 2f       	mov	r18, r23
 21a:	2f 70       	andi	r18, 0x0F	; 15
 21c:	20 93 24 06 	sts	0x0624, r18	; 0x800624 <__TEXT_REGION_LENGTH__+0x7fb624>
	PORTC_OUT = Leds >> 12  & 0xFF;
 220:	dc 01       	movw	r26, r24
 222:	cb 01       	movw	r24, r22
 224:	07 2e       	mov	r0, r23
 226:	7c e0       	ldi	r23, 0x0C	; 12
 228:	b6 95       	lsr	r27
 22a:	a7 95       	ror	r26
 22c:	97 95       	ror	r25
 22e:	87 95       	ror	r24
 230:	7a 95       	dec	r23
 232:	d1 f7       	brne	.-12     	; 0x228 <_Z8ShowLEDsm+0x14>
 234:	70 2d       	mov	r23, r0
 236:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x7fb644>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e2       	ldi	r24, 0x2F	; 47
 23c:	95 e7       	ldi	r25, 0x75	; 117
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <_Z8ShowLEDsm+0x2a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_Z8ShowLEDsm+0x30>
 244:	00 00       	nop
 246:	08 95       	ret

00000248 <main>:
	_delay_ms(120);
}
int main(void)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <main+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <main+0x8>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t MaxBit  = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	a0 e0       	ldi	r26, 0x00	; 0
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	ab 83       	std	Y+3, r26	; 0x03
 262:	bc 83       	std	Y+4, r27	; 0x04
	MaxBit = MaxBit << 19;
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	ab 81       	ldd	r26, Y+3	; 0x03
 26a:	bc 81       	ldd	r27, Y+4	; 0x04
 26c:	07 2e       	mov	r0, r23
 26e:	73 e1       	ldi	r23, 0x13	; 19
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	aa 1f       	adc	r26, r26
 276:	bb 1f       	adc	r27, r27
 278:	7a 95       	dec	r23
 27a:	d1 f7       	brne	.-12     	; 0x270 <main+0x28>
 27c:	70 2d       	mov	r23, r0
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	9a 83       	std	Y+2, r25	; 0x02
 282:	ab 83       	std	Y+3, r26	; 0x03
 284:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t RunningLed = 1;
	uint8_t Direction = 0;

	PORTA_DIR = 0xFF;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7fb600>
	PORTB_DIR = 0x0F;
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	90 93 20 06 	sts	0x0620, r25	; 0x800620 <__TEXT_REGION_LENGTH__+0x7fb620>
	PORTC_DIR = 0xFF;
 292:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x7fb640>
int main(void)
{
	volatile uint32_t MaxBit  = 1;
	MaxBit = MaxBit << 19;
	uint32_t RunningLed = 1;
	uint8_t Direction = 0;
 296:	10 e0       	ldi	r17, 0x00	; 0
}
int main(void)
{
	volatile uint32_t MaxBit  = 1;
	MaxBit = MaxBit << 19;
	uint32_t RunningLed = 1;
 298:	c1 2c       	mov	r12, r1
 29a:	d1 2c       	mov	r13, r1
 29c:	76 01       	movw	r14, r12
 29e:	c3 94       	inc	r12
	PORTB_DIR = 0x0F;
	PORTC_DIR = 0xFF;
	
	while(1)
	{
		ShowLEDs(RunningLed);
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	0e 94 0a 01 	call	0x214	; 0x214 <_Z8ShowLEDsm>
		
		if(Direction == 0)                    // Если напрвление справа налево (число бегущих битов увеличивается)
 2a8:	11 11       	cpse	r17, r1
 2aa:	1f c0       	rjmp	.+62     	; 0x2ea <main+0xa2>
		{
			if (RunningLed & MaxBit)          // Если бегущий бит совпадает с максимальным 
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	9a 81       	ldd	r25, Y+2	; 0x02
 2b0:	ab 81       	ldd	r26, Y+3	; 0x03
 2b2:	bc 81       	ldd	r27, Y+4	; 0x04
 2b4:	8c 21       	and	r24, r12
 2b6:	9d 21       	and	r25, r13
 2b8:	ae 21       	and	r26, r14
 2ba:	bf 21       	and	r27, r15
 2bc:	89 2b       	or	r24, r25
 2be:	8a 2b       	or	r24, r26
 2c0:	8b 2b       	or	r24, r27
 2c2:	71 f0       	breq	.+28     	; 0x2e0 <main+0x98>
			{
				RunningLed = RunningLed >> 1; // Сдвигаем бит
 2c4:	f6 94       	lsr	r15
 2c6:	e7 94       	ror	r14
 2c8:	d7 94       	ror	r13
 2ca:	c7 94       	ror	r12
				RunningLed |= MaxBit;         // 01000000 ИЛИ 10000000 = 11000000 = RunningLed и тд ...
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	ab 81       	ldd	r26, Y+3	; 0x03
 2d2:	bc 81       	ldd	r27, Y+4	; 0x04
 2d4:	c8 2a       	or	r12, r24
 2d6:	d9 2a       	or	r13, r25
 2d8:	ea 2a       	or	r14, r26
 2da:	fb 2a       	or	r15, r27
				Direction = 1;                // Меняем направление
 2dc:	11 e0       	ldi	r17, 0x01	; 1
 2de:	4c c0       	rjmp	.+152    	; 0x378 <main+0x130>
			} else
			RunningLed = RunningLed << 1;     // Иначе двигаем биты справа налево
 2e0:	cc 0c       	add	r12, r12
 2e2:	dd 1c       	adc	r13, r13
 2e4:	ee 1c       	adc	r14, r14
 2e6:	ff 1c       	adc	r15, r15
 2e8:	47 c0       	rjmp	.+142    	; 0x378 <main+0x130>
			
		} else if (Direction == 1)            // Если направление слева направо (число бегущих битов увеличивается)
 2ea:	11 30       	cpi	r17, 0x01	; 1
 2ec:	79 f4       	brne	.+30     	; 0x30c <main+0xc4>
		{
			if (RunningLed & 1)               // Если бегущий бит совпадет с минимальным
 2ee:	c0 fe       	sbrs	r12, 0
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <main+0xba>
			{
				RunningLed = RunningLed << 1; // Сдвигаем бит
 2f2:	cc 0c       	add	r12, r12
 2f4:	dd 1c       	adc	r13, r13
 2f6:	ee 1c       	adc	r14, r14
 2f8:	ff 1c       	adc	r15, r15
				RunningLed |= 1;              // 00000010 ИЛИ 00000001 = 00000011 = RunningLed и тд ...
 2fa:	68 94       	set
 2fc:	c0 f8       	bld	r12, 0
				Direction = 0;                // Меняем направление
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	3b c0       	rjmp	.+118    	; 0x378 <main+0x130>
			} else
			RunningLed = RunningLed >> 1;     // Иначе двигаем биты слева направо
 302:	f6 94       	lsr	r15
 304:	e7 94       	ror	r14
 306:	d7 94       	ror	r13
 308:	c7 94       	ror	r12
 30a:	36 c0       	rjmp	.+108    	; 0x378 <main+0x130>
 30c:	81 2f       	mov	r24, r17
 30e:	83 70       	andi	r24, 0x03	; 3
		}
		
		/* На этом этапе биты заполнили все ячейки */
		
		else if ( (Direction & 3) == 2)       // Иначе если направление справа налево (число бегущих битов уменьшается)
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	19 f5       	brne	.+70     	; 0x35a <main+0x112>
		{
			RunningLed = RunningLed << 1;     // Двигаем бит налево
 314:	cc 0c       	add	r12, r12
 316:	dd 1c       	adc	r13, r13
 318:	ee 1c       	adc	r14, r14
 31a:	ff 1c       	adc	r15, r15
			RunningLed &= (MaxBit << 1) - 1;  // Отсекаем самый левый бит: 111111110 И 011111111 = 011111110
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	ab 81       	ldd	r26, Y+3	; 0x03
 322:	bc 81       	ldd	r27, Y+4	; 0x04
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	aa 1f       	adc	r26, r26
 32a:	bb 1f       	adc	r27, r27
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	a1 09       	sbc	r26, r1
 330:	b1 09       	sbc	r27, r1
 332:	c8 22       	and	r12, r24
 334:	d9 22       	and	r13, r25
 336:	ea 22       	and	r14, r26
 338:	fb 22       	and	r15, r27
			// Меняем направления
			if (Direction & 4)                
 33a:	12 fd       	sbrc	r17, 2
 33c:	1a c0       	rjmp	.+52     	; 0x372 <main+0x12a>
			Direction = 3;
			else if (RunningLed & MaxBit)
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	ab 81       	ldd	r26, Y+3	; 0x03
 344:	bc 81       	ldd	r27, Y+4	; 0x04
 346:	8c 21       	and	r24, r12
 348:	9d 21       	and	r25, r13
 34a:	ae 21       	and	r26, r14
 34c:	bf 21       	and	r27, r15
 34e:	89 2b       	or	r24, r25
 350:	8a 2b       	or	r24, r26
 352:	8b 2b       	or	r24, r27
 354:	89 f0       	breq	.+34     	; 0x378 <main+0x130>
			Direction |= 4;
 356:	14 60       	ori	r17, 0x04	; 4
 358:	0f c0       	rjmp	.+30     	; 0x378 <main+0x130>
			
		}
		else if ( (Direction & 3) == 3)   // Иначе если направление слева направо (число бегущих битов уменьшается)
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	69 f4       	brne	.+26     	; 0x378 <main+0x130>
		{
			RunningLed = RunningLed >> 1; // Двигаем бит направо
 35e:	f6 94       	lsr	r15
 360:	e7 94       	ror	r14
 362:	d7 94       	ror	r13
 364:	c7 94       	ror	r12
			// Меняем направления
			if (Direction & 4)
 366:	12 fd       	sbrc	r17, 2
 368:	06 c0       	rjmp	.+12     	; 0x376 <main+0x12e>
			Direction = 2;
			else if (RunningLed & 1)
 36a:	c0 fe       	sbrs	r12, 0
 36c:	05 c0       	rjmp	.+10     	; 0x378 <main+0x130>
			Direction |= 4;
 36e:	14 60       	ori	r17, 0x04	; 4
 370:	03 c0       	rjmp	.+6      	; 0x378 <main+0x130>
		{
			RunningLed = RunningLed << 1;     // Двигаем бит налево
			RunningLed &= (MaxBit << 1) - 1;  // Отсекаем самый левый бит: 111111110 И 011111111 = 011111110
			// Меняем направления
			if (Direction & 4)                
			Direction = 3;
 372:	13 e0       	ldi	r17, 0x03	; 3
 374:	01 c0       	rjmp	.+2      	; 0x378 <main+0x130>
		else if ( (Direction & 3) == 3)   // Иначе если направление слева направо (число бегущих битов уменьшается)
		{
			RunningLed = RunningLed >> 1; // Двигаем бит направо
			// Меняем направления
			if (Direction & 4)
			Direction = 2;
 376:	12 e0       	ldi	r17, 0x02	; 2
			else if (RunningLed & 1)
			Direction |= 4;
		}
		
		if(RunningLed == (MaxBit << 1) - 1)  // Если все биты единицы
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	9a 81       	ldd	r25, Y+2	; 0x02
 37c:	ab 81       	ldd	r26, Y+3	; 0x03
 37e:	bc 81       	ldd	r27, Y+4	; 0x04
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	a1 09       	sbc	r26, r1
 38c:	b1 09       	sbc	r27, r1
 38e:	c8 16       	cp	r12, r24
 390:	d9 06       	cpc	r13, r25
 392:	ea 06       	cpc	r14, r26
 394:	fb 06       	cpc	r15, r27
 396:	11 f4       	brne	.+4      	; 0x39c <main+0x154>
		Direction |= 2 | 4;
 398:	16 60       	ori	r17, 0x06	; 6
 39a:	82 cf       	rjmp	.-252    	; 0x2a0 <main+0x58>
		else if ((RunningLed == MaxBit) && (Direction & 3) == 2) // Если остался один бит
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	ab 81       	ldd	r26, Y+3	; 0x03
 3a2:	bc 81       	ldd	r27, Y+4	; 0x04
 3a4:	c8 16       	cp	r12, r24
 3a6:	d9 06       	cpc	r13, r25
 3a8:	ea 06       	cpc	r14, r26
 3aa:	fb 06       	cpc	r15, r27
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x168>
 3ae:	78 cf       	rjmp	.-272    	; 0x2a0 <main+0x58>
 3b0:	81 2f       	mov	r24, r17
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x172>
 3b8:	73 cf       	rjmp	.-282    	; 0x2a0 <main+0x58>
		Direction = 0; // Начинаем все сначала
 3ba:	10 e0       	ldi	r17, 0x00	; 0
 3bc:	71 cf       	rjmp	.-286    	; 0x2a0 <main+0x58>

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
