
Leds2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000418  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a16  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000275a  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cc  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00005c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c82  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bc  00000000  00000000  00007912  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	d7 e2       	ldi	r29, 0x27	; 39
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 2a 01 	call	0x254	; 0x254 <main>
 20c:	0c 94 0a 02 	jmp	0x414	; 0x414 <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <_Z4movem>:

#include <avr/io.h>
#include <util/delay.h>

void move(uint32_t leds)
{
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
	PORTA_OUT = leds;
 218:	60 93 04 06 	sts	0x0604, r22	; 0x800604 <__TEXT_REGION_LENGTH__+0x7fb604>
	PORTB_OUT = leds >> 8;
 21c:	07 2f       	mov	r16, r23
 21e:	18 2f       	mov	r17, r24
 220:	29 2f       	mov	r18, r25
 222:	33 27       	eor	r19, r19
 224:	00 93 24 06 	sts	0x0624, r16	; 0x800624 <__TEXT_REGION_LENGTH__+0x7fb624>
	PORTC_OUT = leds >> 12;
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	07 2e       	mov	r0, r23
 22e:	7c e0       	ldi	r23, 0x0C	; 12
 230:	b6 95       	lsr	r27
 232:	a7 95       	ror	r26
 234:	97 95       	ror	r25
 236:	87 95       	ror	r24
 238:	7a 95       	dec	r23
 23a:	d1 f7       	brne	.-12     	; 0x230 <_Z4movem+0x1c>
 23c:	70 2d       	mov	r23, r0
 23e:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x7fb644>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	8b e7       	ldi	r24, 0x7B	; 123
 244:	92 e9       	ldi	r25, 0x92	; 146
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <_Z4movem+0x32>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <_Z4movem+0x38>
 24c:	00 00       	nop
	_delay_ms(150);
}
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <main>:

int main(void)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	28 97       	sbiw	r28, 0x08	; 8
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	de bf       	out	0x3e, r29	; 62
	PORTA_DIR = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7fb600>
	PORTB_DIR = 0x0F;
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	90 93 20 06 	sts	0x0620, r25	; 0x800620 <__TEXT_REGION_LENGTH__+0x7fb620>
	PORTC_DIR = 0xFF;
 26e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x7fb640>
	uint32_t led = 1;
	uint32_t dir = 1;
	uint32_t minbit = 1;
	uint32_t maxbit = 1;
	uint32_t StableLed = 0;
 272:	81 2c       	mov	r8, r1
 274:	91 2c       	mov	r9, r1
 276:	54 01       	movw	r10, r8
	maxbit <<= 19;
 278:	41 2c       	mov	r4, r1
 27a:	51 2c       	mov	r5, r1
 27c:	32 01       	movw	r6, r4
 27e:	68 94       	set
 280:	63 f8       	bld	r6, 3
	PORTA_DIR = 0xFF;
	PORTB_DIR = 0x0F;
	PORTC_DIR = 0xFF;
	uint32_t led = 1;
	uint32_t dir = 1;
	uint32_t minbit = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	a0 e0       	ldi	r26, 0x00	; 0
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	ab 83       	std	Y+3, r26	; 0x03
 290:	bc 83       	std	Y+4, r27	; 0x04
{
	PORTA_DIR = 0xFF;
	PORTB_DIR = 0x0F;
	PORTC_DIR = 0xFF;
	uint32_t led = 1;
	uint32_t dir = 1;
 292:	8d 83       	std	Y+5, r24	; 0x05
 294:	9e 83       	std	Y+6, r25	; 0x06
 296:	af 83       	std	Y+7, r26	; 0x07
 298:	b8 87       	std	Y+8, r27	; 0x08
int main(void)
{
	PORTA_DIR = 0xFF;
	PORTB_DIR = 0x0F;
	PORTC_DIR = 0xFF;
	uint32_t led = 1;
 29a:	c1 2c       	mov	r12, r1
 29c:	d1 2c       	mov	r13, r1
 29e:	76 01       	movw	r14, r12
 2a0:	c3 94       	inc	r12
 2a2:	4a c0       	rjmp	.+148    	; 0x338 <main+0xe4>
		{
			led = 1;
			dir = 1;
			minbit = 1;
			maxbit = 1;
			StableLed = 0;
 2a4:	81 2c       	mov	r8, r1
 2a6:	91 2c       	mov	r9, r1
 2a8:	54 01       	movw	r10, r8
			maxbit <<= 19;
 2aa:	41 2c       	mov	r4, r1
 2ac:	51 2c       	mov	r5, r1
 2ae:	32 01       	movw	r6, r4
 2b0:	68 94       	set
 2b2:	63 f8       	bld	r6, 3
		}
		else 
		{
			led = 1;
			dir = 1;
			minbit = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	a0 e0       	ldi	r26, 0x00	; 0
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	ab 83       	std	Y+3, r26	; 0x03
 2c2:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		else 
		{
			led = 1;
			dir = 1;
 2c4:	8d 83       	std	Y+5, r24	; 0x05
 2c6:	9e 83       	std	Y+6, r25	; 0x06
 2c8:	af 83       	std	Y+7, r26	; 0x07
 2ca:	b8 87       	std	Y+8, r27	; 0x08
				dir = 1;
			}
		}
		else 
		{
			led = 1;
 2cc:	c1 2c       	mov	r12, r1
 2ce:	d1 2c       	mov	r13, r1
 2d0:	76 01       	movw	r14, r12
 2d2:	c3 94       	inc	r12
 2d4:	31 c0       	rjmp	.+98     	; 0x338 <main+0xe4>
			dir = 1;
			minbit = 1;
			maxbit = 1;
			StableLed = 0;
 2d6:	81 2c       	mov	r8, r1
 2d8:	91 2c       	mov	r9, r1
 2da:	54 01       	movw	r10, r8
			maxbit <<= 19;
 2dc:	41 2c       	mov	r4, r1
 2de:	51 2c       	mov	r5, r1
 2e0:	32 01       	movw	r6, r4
 2e2:	68 94       	set
 2e4:	63 f8       	bld	r6, 3
		}
		else 
		{
			led = 1;
			dir = 1;
			minbit = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a0 e0       	ldi	r26, 0x00	; 0
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	ab 83       	std	Y+3, r26	; 0x03
 2f4:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		else 
		{
			led = 1;
			dir = 1;
 2f6:	8d 83       	std	Y+5, r24	; 0x05
 2f8:	9e 83       	std	Y+6, r25	; 0x06
 2fa:	af 83       	std	Y+7, r26	; 0x07
 2fc:	b8 87       	std	Y+8, r27	; 0x08
				dir = 1;
			}
		}
		else 
		{
			led = 1;
 2fe:	c1 2c       	mov	r12, r1
 300:	d1 2c       	mov	r13, r1
 302:	76 01       	movw	r14, r12
 304:	c3 94       	inc	r12
 306:	18 c0       	rjmp	.+48     	; 0x338 <main+0xe4>
			dir = 1;
			minbit = 1;
			maxbit = 1;
			StableLed = 0;
 308:	81 2c       	mov	r8, r1
 30a:	91 2c       	mov	r9, r1
 30c:	54 01       	movw	r10, r8
			maxbit <<= 19;
 30e:	41 2c       	mov	r4, r1
 310:	51 2c       	mov	r5, r1
 312:	32 01       	movw	r6, r4
 314:	68 94       	set
 316:	63 f8       	bld	r6, 3
		}
		else 
		{
			led = 1;
			dir = 1;
			minbit = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	ab 83       	std	Y+3, r26	; 0x03
 326:	bc 83       	std	Y+4, r27	; 0x04
			}
		}
		else 
		{
			led = 1;
			dir = 1;
 328:	8d 83       	std	Y+5, r24	; 0x05
 32a:	9e 83       	std	Y+6, r25	; 0x06
 32c:	af 83       	std	Y+7, r26	; 0x07
 32e:	b8 87       	std	Y+8, r27	; 0x08
				dir = 1;
			}
		}
		else 
		{
			led = 1;
 330:	c1 2c       	mov	r12, r1
 332:	d1 2c       	mov	r13, r1
 334:	76 01       	movw	r14, r12
 336:	c3 94       	inc	r12
	uint32_t StableLed = 0;
	maxbit <<= 19;

	while (1)
	{
		move(led | StableLed);
 338:	c7 01       	movw	r24, r14
 33a:	b6 01       	movw	r22, r12
 33c:	68 29       	or	r22, r8
 33e:	79 29       	or	r23, r9
 340:	8a 29       	or	r24, r10
 342:	9b 29       	or	r25, r11
 344:	0e 94 0a 01 	call	0x214	; 0x214 <_Z4movem>
		
		if((led < maxbit) && (dir) && (StableLed != (1 << 20) - 1)) 
 348:	c4 14       	cp	r12, r4
 34a:	d5 04       	cpc	r13, r5
 34c:	e6 04       	cpc	r14, r6
 34e:	f7 04       	cpc	r15, r7
 350:	20 f5       	brcc	.+72     	; 0x39a <main+0x146>
 352:	8d 81       	ldd	r24, Y+5	; 0x05
 354:	9e 81       	ldd	r25, Y+6	; 0x06
 356:	af 81       	ldd	r26, Y+7	; 0x07
 358:	b8 85       	ldd	r27, Y+8	; 0x08
 35a:	89 2b       	or	r24, r25
 35c:	8a 2b       	or	r24, r26
 35e:	8b 2b       	or	r24, r27
 360:	e1 f0       	breq	.+56     	; 0x39a <main+0x146>
 362:	9f ef       	ldi	r25, 0xFF	; 255
 364:	89 16       	cp	r8, r25
 366:	99 06       	cpc	r9, r25
 368:	a9 06       	cpc	r10, r25
 36a:	b9 06       	cpc	r11, r25
 36c:	b1 f0       	breq	.+44     	; 0x39a <main+0x146>
		{
			led <<= 1;
 36e:	cc 0c       	add	r12, r12
 370:	dd 1c       	adc	r13, r13
 372:	ee 1c       	adc	r14, r14
 374:	ff 1c       	adc	r15, r15
			if(led == maxbit) 
 376:	4c 14       	cp	r4, r12
 378:	5d 04       	cpc	r5, r13
 37a:	6e 04       	cpc	r6, r14
 37c:	7f 04       	cpc	r7, r15
 37e:	e1 f6       	brne	.-72     	; 0x338 <main+0xe4>
			{
				StableLed |= led;
 380:	8c 28       	or	r8, r12
 382:	9d 28       	or	r9, r13
 384:	ae 28       	or	r10, r14
 386:	bf 28       	or	r11, r15
				maxbit >>= 1;
 388:	76 94       	lsr	r7
 38a:	67 94       	ror	r6
 38c:	57 94       	ror	r5
 38e:	47 94       	ror	r4
				dir = 0;
 390:	1d 82       	std	Y+5, r1	; 0x05
 392:	1e 82       	std	Y+6, r1	; 0x06
 394:	1f 82       	std	Y+7, r1	; 0x07
 396:	18 86       	std	Y+8, r1	; 0x08
 398:	cf cf       	rjmp	.-98     	; 0x338 <main+0xe4>
			}
		}
		else if((led > minbit) && (!dir) && (StableLed != (1 << 20) - 1))
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	ab 81       	ldd	r26, Y+3	; 0x03
 3a0:	bc 81       	ldd	r27, Y+4	; 0x04
 3a2:	8c 15       	cp	r24, r12
 3a4:	9d 05       	cpc	r25, r13
 3a6:	ae 05       	cpc	r26, r14
 3a8:	bf 05       	cpc	r27, r15
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <main+0x15a>
 3ac:	7b cf       	rjmp	.-266    	; 0x2a4 <main+0x50>
 3ae:	8d 81       	ldd	r24, Y+5	; 0x05
 3b0:	9e 81       	ldd	r25, Y+6	; 0x06
 3b2:	af 81       	ldd	r26, Y+7	; 0x07
 3b4:	b8 85       	ldd	r27, Y+8	; 0x08
 3b6:	89 2b       	or	r24, r25
 3b8:	8a 2b       	or	r24, r26
 3ba:	8b 2b       	or	r24, r27
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <main+0x16c>
 3be:	8b cf       	rjmp	.-234    	; 0x2d6 <main+0x82>
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	89 16       	cp	r8, r25
 3c4:	99 06       	cpc	r9, r25
 3c6:	a9 06       	cpc	r10, r25
 3c8:	b9 06       	cpc	r11, r25
 3ca:	09 f4       	brne	.+2      	; 0x3ce <main+0x17a>
 3cc:	9d cf       	rjmp	.-198    	; 0x308 <main+0xb4>
		{
			led >>= 1;
 3ce:	f6 94       	lsr	r15
 3d0:	e7 94       	ror	r14
 3d2:	d7 94       	ror	r13
 3d4:	c7 94       	ror	r12
			if(led == minbit)
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	ab 81       	ldd	r26, Y+3	; 0x03
 3dc:	bc 81       	ldd	r27, Y+4	; 0x04
 3de:	8c 15       	cp	r24, r12
 3e0:	9d 05       	cpc	r25, r13
 3e2:	ae 05       	cpc	r26, r14
 3e4:	bf 05       	cpc	r27, r15
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0x196>
 3e8:	a7 cf       	rjmp	.-178    	; 0x338 <main+0xe4>
			{
				StableLed |= led;
 3ea:	8c 28       	or	r8, r12
 3ec:	9d 28       	or	r9, r13
 3ee:	ae 28       	or	r10, r14
 3f0:	bf 28       	or	r11, r15
				minbit <<= 1;
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	9a 83       	std	Y+2, r25	; 0x02
 3fe:	ab 83       	std	Y+3, r26	; 0x03
 400:	bc 83       	std	Y+4, r27	; 0x04
				dir = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	8d 83       	std	Y+5, r24	; 0x05
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	af 83       	std	Y+7, r26	; 0x07
 410:	b8 87       	std	Y+8, r27	; 0x08
 412:	92 cf       	rjmp	.-220    	; 0x338 <main+0xe4>

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
